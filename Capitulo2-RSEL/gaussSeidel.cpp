/****************************************************************************80
*  Code: 
*   gaussSeidel.cpp 
*
*  Purpose:
*   Sample C/C++ code that implement the Gauss-Seidel iterative method for the solution  
*   of linear systems  (Ax=b) 
*
*  Modified:
*   Jul 22 2021 16:34 
*
*  Author:
*    Murilo Do Carmo Boratto [muriloboratto@uneb.br]
*
*  Compile:
*    g++ codigo.cpp -o objeto 
*   
*  Execute:
*    ./objeto 
*
*******************************************************************************/

#include <iostream>
#include <iomanip>
#include <stdlib.h>
#include <math.h>

#define MAXSIZE 21   

using namespace std;
using std::showpoint;

void gaudel(double a[MAXSIZE][MAXSIZE],
            int n,
            double b[MAXSIZE],
            double eps,
            int maxiter,
            int& flag, 
            double x[MAXSIZE],
            int& niter);


int main(int argc, char **argv){

   double a[MAXSIZE][MAXSIZE],b[MAXSIZE],x[MAXSIZE],eps;
   int i,j,n,maxiter,niter,flag;

   cout << "Order (n): "; 
   cin >> n ;
   
   cout << "Coefficients (A): \n"; 
  
   for(i=1 ;i<=n;i++){
      for(j=1;j<=n;j++){
        cout << "A[" << i << "][" <<j<<"]="; 
        cin  >> a[i][j];
      }
   }
      
   cout<<"Independent terms (b) : \n";
   
   for(i=1; i<=n; i++){ 
     cout<< "b["<<i<<"]="; 
     cin >> b[i];
   }
   
   maxiter=100000; 
   
   //eps=.0000001;
   eps=.01;
   
   cout << "Initial approach (x0): \n";
   
   for(i=1;i<=n; i++){	  
      cout <<"x[" << i << "] = "; 
      cin >> setprecision(4) >> x[i];
   }
   
   cout<<"\n";
   
   gaudel(a, n, b, eps, maxiter, flag, x, niter);
   
   if (flag){
	  cout <<"\n\nIterations number = "<<niter<<"\n\n";
	  cout <<"Solution Ax=b: \n";
	  
     for (i=1;i<=n;i++)  
       cout<<" x["<<i<<"] = " << x[i]<<endl;
   }else
      cout<<"::Error::";

cout << "\n";

return 0;

}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  This function  implements the Gauss-Seidel iterative           *
 *  method for solving linear systems                              *
 *                 Ax = b                                          *
 *  Given initial vector x0, the sequence of vectors is            *
 *  generated by using the following relationship:                 *
 *  x(i,m+1)=b(i)- sum{a[i,j]*x(j,m+1)} - sum {a[i,j]*x(j,m)},     *
 *                 j<i                    j>i                      *
 *  where x(i,m) -is the i-coordinate of the vector x              *
 *                in the iteration m.                              *
 *  INPUT:                                                         *
 *    A - the  matrix of the linear system                         *
 *    n - the order of the system                                  *
 *    b - the vector on the right-hand side of the system          *
 *    eps - the required accuracy.                                 *
 *    maxiter - the maximal number of iterations                   *
 *
 *  OUTPUT:                                                        *
 *    x   -     the solution vector                                *
 *    flag  -  the auxiliary variable which indicates how the      *
 *              process was terminated                             *
 *    flag=1   successful termination - the required accuracy      *
 *              has been achieved, the solution vector is in x     *
 *              and the number of iterations is in niter           *
 *    flag=0   the required accuracy has not been achieved         *
 *              after the maxiter iterations                       *
 *    niter    the number of iterations  performed                 *
 *                                                                 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  *  * */

void gaudel(double a[MAXSIZE][MAXSIZE],
            int n,
            double b[MAXSIZE],
			   double eps,
            int maxiter,
			   int& flag,
            double x[MAXSIZE],
            int& niter)
{
   double newx;
   int i, j, iter;

   iter=0;
   
   do{
	  flag=1;
	  iter++;

	  for (i=1; i<=n; i++){
		newx=b[i];
		 
      for(j=1;j<=n;j++)
       if(j!=i)  
        newx=newx-a[i][j]*x[j];
		  
       newx=newx/a[i][i];
     
       if(fabs(newx-x[i]) > eps) 
         flag=0;
		 
        x[i]=newx;
     
        cout << "x = " <<  x[i] << " \t\t\t " ;
     
	  }
  
     cout << "\n";
   } while ((flag==0)&&(iter<=maxiter));
     
   niter=iter;

}
